steps:
  # Set up QEMU for multi-architecture support
  # - name: "gcr.io/cloud-builders/docker"
  #   entrypoint: "bash"
  #   args:
  #     - "-c"
  #     - |
  #       docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  # Set up Docker Buildx
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker buildx create --name mybuilder --use
        docker buildx inspect --bootstrap

  # Build and push for multiple architectures with caching
  - name: "gcr.io/cloud-builders/docker"
    id: Build and Push
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker buildx build \
          --platform linux/amd64 \
          -t us-docker.pkg.dev/$PROJECT_ID/orign/vllm:latest \
          -f ./orign/stream/processors/chat/vllm/Dockerfile \
          --cache-from type=registry,ref=us-docker.pkg.dev/$PROJECT_ID/orign/vllm:buildcache \
          --cache-to type=registry,ref=us-docker.pkg.dev/$PROJECT_ID/orign/vllm:buildcache,mode=max \
          --push \
          .

  - name: "gcr.io/cloud-builders/docker"
    id: Build and Push
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker buildx build \
          --platform linux/amd64 \
          -t us-docker.pkg.dev/$PROJECT_ID/orign/sentence_tf:latest \
          -f ./orign/stream/processors/embed/sentence_tf/Dockerfile \
          --cache-from type=registry,ref=us-docker.pkg.dev/$PROJECT_ID/orign/sentence_tf:buildcache \
          --cache-to type=registry,ref=us-docker.pkg.dev/$PROJECT_ID/orign/sentence_tf:buildcache,mode=max \
          --push \
          .

timeout: "3600s"
